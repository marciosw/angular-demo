"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.V2OrganizationNotificationConfig = exports.V2OrganizationMuteConfig = exports.SourceIamPolicy = exports.SourceIamMember = exports.SourceIamBinding = exports.Source = exports.ProjectNotificationConfig = exports.ProjectCustomModule = exports.OrganizationCustomModule = exports.NotificationConfig = exports.MuteConfig = exports.ManagementProjectSecurityHealthAnalyticsCustomModule = exports.ManagementOrganizationSecurityHealthAnalyticsCustomModule = exports.ManagementOrganizationEventThreatDetectionCustomModule = exports.ManagementFolderSecurityHealthAnalyticsCustomModule = exports.InstanceIamPolicy = exports.InstanceIamMember = exports.InstanceIamBinding = exports.getSourceIamPolicyOutput = exports.getSourceIamPolicy = exports.FolderCustomModule = exports.EventThreatDetectionCustomModule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.EventThreatDetectionCustomModule = null;
utilities.lazyLoad(exports, ["EventThreatDetectionCustomModule"], () => require("./eventThreatDetectionCustomModule"));
exports.FolderCustomModule = null;
utilities.lazyLoad(exports, ["FolderCustomModule"], () => require("./folderCustomModule"));
exports.getSourceIamPolicy = null;
exports.getSourceIamPolicyOutput = null;
utilities.lazyLoad(exports, ["getSourceIamPolicy", "getSourceIamPolicyOutput"], () => require("./getSourceIamPolicy"));
exports.InstanceIamBinding = null;
utilities.lazyLoad(exports, ["InstanceIamBinding"], () => require("./instanceIamBinding"));
exports.InstanceIamMember = null;
utilities.lazyLoad(exports, ["InstanceIamMember"], () => require("./instanceIamMember"));
exports.InstanceIamPolicy = null;
utilities.lazyLoad(exports, ["InstanceIamPolicy"], () => require("./instanceIamPolicy"));
exports.ManagementFolderSecurityHealthAnalyticsCustomModule = null;
utilities.lazyLoad(exports, ["ManagementFolderSecurityHealthAnalyticsCustomModule"], () => require("./managementFolderSecurityHealthAnalyticsCustomModule"));
exports.ManagementOrganizationEventThreatDetectionCustomModule = null;
utilities.lazyLoad(exports, ["ManagementOrganizationEventThreatDetectionCustomModule"], () => require("./managementOrganizationEventThreatDetectionCustomModule"));
exports.ManagementOrganizationSecurityHealthAnalyticsCustomModule = null;
utilities.lazyLoad(exports, ["ManagementOrganizationSecurityHealthAnalyticsCustomModule"], () => require("./managementOrganizationSecurityHealthAnalyticsCustomModule"));
exports.ManagementProjectSecurityHealthAnalyticsCustomModule = null;
utilities.lazyLoad(exports, ["ManagementProjectSecurityHealthAnalyticsCustomModule"], () => require("./managementProjectSecurityHealthAnalyticsCustomModule"));
exports.MuteConfig = null;
utilities.lazyLoad(exports, ["MuteConfig"], () => require("./muteConfig"));
exports.NotificationConfig = null;
utilities.lazyLoad(exports, ["NotificationConfig"], () => require("./notificationConfig"));
exports.OrganizationCustomModule = null;
utilities.lazyLoad(exports, ["OrganizationCustomModule"], () => require("./organizationCustomModule"));
exports.ProjectCustomModule = null;
utilities.lazyLoad(exports, ["ProjectCustomModule"], () => require("./projectCustomModule"));
exports.ProjectNotificationConfig = null;
utilities.lazyLoad(exports, ["ProjectNotificationConfig"], () => require("./projectNotificationConfig"));
exports.Source = null;
utilities.lazyLoad(exports, ["Source"], () => require("./source"));
exports.SourceIamBinding = null;
utilities.lazyLoad(exports, ["SourceIamBinding"], () => require("./sourceIamBinding"));
exports.SourceIamMember = null;
utilities.lazyLoad(exports, ["SourceIamMember"], () => require("./sourceIamMember"));
exports.SourceIamPolicy = null;
utilities.lazyLoad(exports, ["SourceIamPolicy"], () => require("./sourceIamPolicy"));
exports.V2OrganizationMuteConfig = null;
utilities.lazyLoad(exports, ["V2OrganizationMuteConfig"], () => require("./v2organizationMuteConfig"));
exports.V2OrganizationNotificationConfig = null;
utilities.lazyLoad(exports, ["V2OrganizationNotificationConfig"], () => require("./v2organizationNotificationConfig"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "gcp:securitycenter/eventThreatDetectionCustomModule:EventThreatDetectionCustomModule":
                return new exports.EventThreatDetectionCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/folderCustomModule:FolderCustomModule":
                return new exports.FolderCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/instanceIamBinding:InstanceIamBinding":
                return new exports.InstanceIamBinding(name, undefined, { urn });
            case "gcp:securitycenter/instanceIamMember:InstanceIamMember":
                return new exports.InstanceIamMember(name, undefined, { urn });
            case "gcp:securitycenter/instanceIamPolicy:InstanceIamPolicy":
                return new exports.InstanceIamPolicy(name, undefined, { urn });
            case "gcp:securitycenter/managementFolderSecurityHealthAnalyticsCustomModule:ManagementFolderSecurityHealthAnalyticsCustomModule":
                return new exports.ManagementFolderSecurityHealthAnalyticsCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/managementOrganizationEventThreatDetectionCustomModule:ManagementOrganizationEventThreatDetectionCustomModule":
                return new exports.ManagementOrganizationEventThreatDetectionCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule:ManagementOrganizationSecurityHealthAnalyticsCustomModule":
                return new exports.ManagementOrganizationSecurityHealthAnalyticsCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/managementProjectSecurityHealthAnalyticsCustomModule:ManagementProjectSecurityHealthAnalyticsCustomModule":
                return new exports.ManagementProjectSecurityHealthAnalyticsCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/muteConfig:MuteConfig":
                return new exports.MuteConfig(name, undefined, { urn });
            case "gcp:securitycenter/notificationConfig:NotificationConfig":
                return new exports.NotificationConfig(name, undefined, { urn });
            case "gcp:securitycenter/organizationCustomModule:OrganizationCustomModule":
                return new exports.OrganizationCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/projectCustomModule:ProjectCustomModule":
                return new exports.ProjectCustomModule(name, undefined, { urn });
            case "gcp:securitycenter/projectNotificationConfig:ProjectNotificationConfig":
                return new exports.ProjectNotificationConfig(name, undefined, { urn });
            case "gcp:securitycenter/source:Source":
                return new exports.Source(name, undefined, { urn });
            case "gcp:securitycenter/sourceIamBinding:SourceIamBinding":
                return new exports.SourceIamBinding(name, undefined, { urn });
            case "gcp:securitycenter/sourceIamMember:SourceIamMember":
                return new exports.SourceIamMember(name, undefined, { urn });
            case "gcp:securitycenter/sourceIamPolicy:SourceIamPolicy":
                return new exports.SourceIamPolicy(name, undefined, { urn });
            case "gcp:securitycenter/v2OrganizationMuteConfig:V2OrganizationMuteConfig":
                return new exports.V2OrganizationMuteConfig(name, undefined, { urn });
            case "gcp:securitycenter/v2OrganizationNotificationConfig:V2OrganizationNotificationConfig":
                return new exports.V2OrganizationNotificationConfig(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gcp", "securitycenter/eventThreatDetectionCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/folderCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/instanceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/instanceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/instanceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementFolderSecurityHealthAnalyticsCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementOrganizationEventThreatDetectionCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementOrganizationSecurityHealthAnalyticsCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/managementProjectSecurityHealthAnalyticsCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/muteConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/notificationConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/organizationCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/projectCustomModule", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/projectNotificationConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/source", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/sourceIamBinding", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/sourceIamMember", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/sourceIamPolicy", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/v2OrganizationMuteConfig", _module);
pulumi.runtime.registerResourceModule("gcp", "securitycenter/v2OrganizationNotificationConfig", _module);
//# sourceMappingURL=index.js.map